#include<stdio.h>
#include<stdlib.h>


#define SIZE 9

#define UNASSIGNED 0

//function prototype

int isAppearedInRow(int grid[SIZE][SIZE], int row, int num);
int isAppearedInColumn(int grid[SIZE][SIZE], int column, int num);
int isAppearedInBox(int grid[SIZE][SIZE], int StartRow, int StartColumn, int num);
int isLegalNumber(int grid[SIZE][SIZE], int row, int column, int num);
int isUnassigned(int grid[SIZE][SIZE], int *row, int *column);
int solve(int grid[SIZE][SIZE]);
void print_grid(int grid[SIZE][SIZE]);
void solveSudoku(int grid[SIZE][SIZE]);



int main()
{
    int ch;
    
    void(*arr[])(int[SIZE][SIZE]) = {solveSudoku};
    
    int grid[SIZE][SIZE] = {{0,0,0, 0,0,3, 2,9,0},
        {0,8,6, 5,0,0, 0,0,0},
        {0,2,0, 0,0,1, 0,0,0},
        {0,0,3, 7,0,5, 1,0,0},
        {9,0,0, 0,0,0, 0,0,8},
        {0,0,2, 9,0,8, 3,0,0},
        {0,0,0, 4,0,0, 0,8,0},
        {0,4,7, 1,0,0, 0,0,0}};
    
    //solveSudoku(grid);
    
    printf("Enter Choice: 0 for Sudoku\n");
    scanf("%d", &ch);
    
    if(ch > 3)
    {
        return 0;
    }
    
    (*arr[ch])(grid);
    
    return 0;
}

// Check if number appeared in Row or not
int isAppearedInRow(int grid[SIZE][SIZE], int row, int num)
{
    for(int column = 0; column < SIZE; column++)
    {
        if(grid[row][column] == num)
        {
            return 1;
        }
    }
    
    return 0;
}

//Check if number appeared in Column or not
int isAppearedInColumn(int grid[SIZE][SIZE], int column, int num)
{
    for(int row = 0; row < SIZE; row++)
    {
        if(grid[row][column] == num)
        {
            return 1;
        }
    }
    
    return 0;
}

//Check if number Appeared in small grid or not
int isAppearedInBox(int grid[SIZE][SIZE], int StartRow, int StartColumn, int num)
{
    for(int row = 0; row < 3; row++)
    {
        for(int column = 0; column < 3; column++)
        {
            if(grid[row + StartRow][column + StartColumn] == num)
            {
                return 1;
            }
        }
    }
    return 0;
}

//Check if the number is legal or not
int isLegalNumber(int grid[SIZE][SIZE], int row, int column, int num)
{
    return !isAppearedInRow(grid, row, num) && !isAppearedInColumn(grid, column, num) && !isAppearedInBox(grid,row - (row % 3), column - (column % 3), num);
}

//Check if the position is assigned by any number or not
int isUnassigned(int grid[SIZE][SIZE], int *row, int *column)
{
    for(*row = 0; *row < SIZE; (*row)++)
    {
        for(*column = 0; *column < SIZE; (*column)++)
        {
            if(grid[*row][*column] == 0)
            {
                return 1;
            }
        }
    }
    
    return 0;
}

//solve the grid by calling recursion(back tracking)
int solve(int grid[SIZE][SIZE])
{
    int row = 0;
    int column = 0;
    
    if(!isUnassigned(grid, &row, &column))
    {
        return 1;
    }
    
    for(int num = 1; num <= SIZE; num++)
    {
        if(isLegalNumber(grid, row, column, num))
        {
            grid[row][column] = num;
            
            if(solve(grid))
            {
                return 1;
            }
            
            grid[row][column] = UNASSIGNED;
        }
    }
    
    return 0;
}

// print the grid
void print_grid(int grid[SIZE][SIZE])
{
    for(int row = 0; row < SIZE; row++)
    {
        for(int column = 0; column < SIZE; column++)
        {
            printf("%2d", grid[row][column]);
        }
        printf("\n");
    }
}

void solveSudoku(int grid[SIZE][SIZE])
{
    printf("Original Puzzle: \n");
    print_grid(grid);
    
    if(solve(grid))
    {
        printf("------------------------------\n");
        printf("Solved Puzzle\n");
        print_grid(grid);
    }
    
    else
    {
        printf("no solution");
    }
    
}




